devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
Rcpp::compileAttributes()
devtools::check()
Rcpp::compileAttributes()
devtools::check()
devtools::check()
y = c(23, 24, 26, 37, 38, 25, 36, 40)
x1 = c(1, 2, 3, 4, 5, 6, 7, 8)
x2 = c(23, 32, 34, 20, 24, 56, 34, 24)
result = lr(y ~ x1 + x2)
help(lr)
usethis::use_vignette()
usethis::use_vignette("tutorial for lr")
usethis::use_vignette("tutorial")
devtools::install()
library(testPkg)
all.equal(as.numeric(lr(y ~ x1)[[1]][, 1]), as.numeric(lm(y ~ x1)[[1]]))
all.equal(as.numeric(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][, 1]), as.numeric(lm(y ~ x1 + x2 + x3)[[1]]))
library(testPkg)
y = c(23, 24, 26, 37, 38, 25, 36, 40)
x1 = c(1, 2, 3, 4, 5, 6, 7, 8)
x2 = c(23, 32, 34, 20, 24, 56, 34, 24)
x3 = c("M", "F", "F", "U", "M", "F", "U", "M")
x4 = mtcars$hp ### using "mtcars" dataframe from R
result = lr(y ~ x1 + x2 + x3)
result
Coefficients = result[[1]]
F_test_and_R2 = result[[2]]
Fitted_values = result[[3]]
Residuals = result[[4]]
SS = result[[5]]
X_inverse = result[[6]]
Coefficients_Variance = result[[7]]
result1 = lr(y ~ x1 + x2 + x3) ##coding = "reference", intercept = TRUE, reference = 1
result1[[1]]                   ##check the difference of coefficients under different options
result2 = lr(y ~ x1 + x2 + x3, coding = "means")
result2[[1]]
result3 = lr(y ~ x1 + x2 + x3, intercept = FALSE)
result3[[1]]
result4 = lr(y ~ x1 + x2 + x3, reference='F')
result4[[1]]
all.equal(as.numeric(lr(y ~ x1)[[1]][, 1]), as.numeric(lm(y ~ x1)[[1]]))
all.equal(as.numeric(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][, 1]), as.numeric(lm(y ~ x1 + x2 + x3)[[1]]))
all.equal(as.numeric(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][, 1]), as.numeric(lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]]))
set.seed(4)
y1 = rnorm(1e+6, 1, 10)
x5 = rnorm(1e+6, 1, 10)
x6 = rnorm(1e+6, 1, 10)
all.equal(as.numeric(lr(y1 ~ x5 + x6)[[1]][, 1]), as.numeric(lm(y1 ~ x5 + x6)[[1]]))  ###It may take several minutes.
####small samples
bench::mark(as.numeric(lr(y ~ x1)[[1]][, 1]), as.numeric(lm(y ~ x1)[[1]]))
all.equal(as.numeric(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][, 1]), as.numeric(lm(y ~ x1 + x2 + x3)[[1]]))
all.equal(as.numeric(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][, 1]), as.numeric(lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]]))
####small samples
bench::mark(as.numeric(lr(y ~ x1)[[1]][, 1]), as.numeric(lm(y ~ x1)[[1]]))
bench::mark(as.numeric(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][, 1]), as.numeric(lm(y ~ x1 + x2 + x3)[[1]]))
bench::mark(as.numeric(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][, 1]), as.numeric(lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]]))
####small samples
bench::mark(lr(y ~ x1)[[1]][, 1], lm(y ~ x1)[[1]])
####small samples
bench::mark(lr(y ~ x1)[[1]][1, 1], lm(y ~ x1)[[1]][[1]])
bench::mark(as.numeric(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][, 1]), as.numeric(lm(y ~ x1 + x2 + x3)[[1]]))
bench::mark(as.numeric(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][, 1]), as.numeric(lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]]))
####small samples
bench::mark(lr(y ~ x1)[[1]][1, 1], lm(y ~ x1)[[1]][[1]])
####small samples
bench::mark(lr(y ~ x1)[[1]][1, 1], lm(y ~ x1)[[1]][[1]])
bench::mark(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][1, 1], lm(y ~ x1 + x2 + x3)[[1]][[1]])
bench::mark(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][1, 1], lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][[1]])
####small samples
bench::mark(lr(y ~ x1)[[1]][1, 1], lm(y ~ x1)[[1]][[1]])
bench::mark(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][1, 1], lm(y ~ x1 + x2 + x3)[[1]][[1]])
bench::mark(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][1, 1], lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][[1]])
####big samples
set.seed(4)
y1 = rnorm(1e+6, 1, 10)
x5 = rnorm(1e+6, 1, 10)
x6 = rnorm(1e+6, 1, 10)
bench::mark(lr(y1 ~ x5 + x6)[[1]][1, 1]), lm(y1 ~ x5 + x6)[[1]][[1]])
####small samples
bench::mark(lr(y ~ x1)[[1]][1, 1], lm(y ~ x1)[[1]][[1]])
bench::mark(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][1, 1], lm(y ~ x1 + x2 + x3)[[1]][[1]])
bench::mark(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][1, 1], lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][[1]])
####big samples
set.seed(4)
y1 = rnorm(1e+6, 1, 10)
x5 = rnorm(1e+6, 1, 10)
x6 = rnorm(1e+6, 1, 10)
bench::mark(lr(y1 ~ x5 + x6)[[1]][1, 1], lm(y1 ~ x5 + x6)[[1]][[1]])
####small samples
compare_result1 = bench::mark(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][1, 1], lm(y ~ x1 + x2 + x3)[[1]][[1]])
print(compare_result1)
plot(compare_result1)
compare_result2 = bench::mark(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][1, 1], lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][[1]])
print(compare_result2)
plot(compare_result2)
####small samples
compare_result1 = bench::mark(lr(y ~ x1 + x2)[[1]][1, 1], lm(y ~ x1 + x2)[[1]][[1]])
print(compare_result1)
plot(compare_result1)
compare_result1 = bench::mark(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][1, 1], lm(y ~ x1 + x2 + x3)[[1]][[1]])
print(compare_result1)
plot(compare_result1)
compare_result2 = bench::mark(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][1, 1], lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][[1]])
print(compare_result2)
plot(compare_result2)
####big samples
set.seed(4)
y1 = rnorm(1e+6, 1, 10)
x5 = rnorm(1e+6, 1, 10)
x6 = rnorm(1e+6, 1, 10)
compare_result3 = bench::mark(lr(y1 ~ x5 + x6)[[1]][1, 1], lm(y1 ~ x5 + x6)[[1]][[1]])
print(compare_result3)
plot(compare_result3)
####big samples
compare_result3 = bench::mark(lr(y1 ~ x5 + x6)[[1]][1, 1], lm(y1 ~ x5 + x6)[[1]][[1]])
print(compare_result3)
plot(compare_result3)
####big samples
compare_result3 = bench::mark(for(i in 1:100) lr(y1 ~ x5 + x6)[[1]][1, 1], for(i in 1:100) lm(y1 ~ x5 + x6)[[1]][[1]])
####big samples
compare_result3 = bench::mark(for(i in 1:10) lr(y1 ~ x5 + x6)[[1]][1, 1], for(i in 1:10) lm(y1 ~ x5 + x6)[[1]][[1]])
print(compare_result3)
plot(compare_result3)
x7=rep(c("M", "M", "F", "F", "U", "M", "F", "U", "M", "M"),1e+5)
####big samples
compare_result3 = bench::mark(for(i in 1:10) lr(y1 ~ x5 + x6)[[1]][1, 1], for(i in 1:10) lm(y1 ~ x5 + x6)[[1]][[1]])
print(compare_result3)
plot(compare_result3)
####big samples with categorical vairables
x7=rep(c("M", "M", "F", "F", "U", "M", "F", "U", "M", "M"),1e+5)
compare_result3 = bench::mark(lr(y1 ~ x5 + x6 + x7, reference = "F")[[1]][1, 1], lm(y1 ~ x5 + x6 + x7)[[1]][[1]])
print(compare_result3)
plot(compare_result3)
##2 samples from vector with categorical variable
compare_result1 = bench::mark(lr(y ~ x1 + x2 + x3, reference = "F")[[1]][1, 1], lm(y ~ x1 + x2 + x3)[[1]][[1]])
print(compare_result1)
plot(compare_result1)
####small samples
##1 samples from vector
compare_result1 = bench::mark(lr(y ~ x1 + x2)[[1]][1, 1], lm(y ~ x1 + x2)[[1]][[1]])
print(compare_result1)
options(repr.plot.width = 1, repr.plot.height = 0.75)
plot(compare_result1)
####small samples
##1 samples from vector
compare_result1 = bench::mark(lr(y ~ x1 + x2)[[1]][1, 1], lm(y ~ x1 + x2)[[1]][[1]])
print(compare_result1)
options(repr.plot.width = 5, repr.plot.height = 0.75)
plot(compare_result1)
####small samples
##1 samples from vector
compare_result1 = bench::mark(lr(y ~ x1 + x2)[[1]][1, 1], lm(y ~ x1 + x2)[[1]][[1]])
print(compare_result1)
plot(compare_result1)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
####1 small samples
y = c(23, 24, 26, 37, 38, 25, 36, 40)
x1 = c(1, 2, 3, 4, 5, 6, 7, 8)
x2 = c(23, 32, 34, 20, 24, 56, 34, 24)
x3 = c("M", "F", "F", "U", "M", "F", "U", "M")
x4 = mtcars$hp
##1.1 cope with different compatible formula format
test_that("testPkg",  {
expect_equal(as.numeric(lr(y ~ x1)[[1]][, 1]), as.numeric(lm(y ~ x1)[[1]]))
expect_equal(as.numeric(lr(y ~ x1 + x2)[[1]][, 1]), as.numeric(lm(y ~ x1 + x2)[[1]]))
expect_equal(as.numeric(lr(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]][, 1]), as.numeric(lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)[[1]]))
expect_equal(as.numeric(lr(mpg ~ cyl + disp + x4, data = mtcars)[[1]][, 1]), as.numeric(lm(mpg ~ cyl + disp + x4, data = mtcars)[[1]]))
})
lr(y ~ x1)[[1]][, 1]
devtools::test()
devtools::check()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
#########
###1.5.2 lr(y ~ x) with error "Cannot find data to fit model."
lr(y ~ x)
devtools::test()
devtools::check()
usethis::use_travis()
usethis::use_coverage()
####big samples
compare_result3 = bench::mark(for(i in 1:10) lr(y1 ~ x5 + x6)[[1]][1, 1], for(i in 1:10) lm(y1 ~ x5 + x6)[[1]][[1]])
devtools::install_github("XuelinGu/LinearRegression")
testPkg::lr.fit()
lr(y~x)
help(lr)
devtools::install_github("XuelinGu/LinearRegression")
devtools::install_github("XuelinGu/LinearRegression")
library(testPkg)
?Linearregression
?lr
library(Rcpp)
install.packages(Rcpp)
library('Rcpp')
install.packages('Rcpp')
library('Rcpp')
library(testPkg)
devtools::install()
devtools::install_github("XuelinGu/LinearRegression", build_vignettes = T)
devtools::test()
remove.packages('testPkg')
library(testPkg)
devtools::test()
devtools::test()
data=NULL
length(data)
devtools::test()
devtools::build()
devtools::test()
####1 small samples
y = c(23, 24, 26, 37, 38, 25, 36, 40)
x1 = c(1, 2, 3, 4, 5, 6, 7, 8)
x2 = c(23, 32, 34, 20, 24, 56, 34, 24)
x3 = c("M", "F", "F", "U", "M", "F", "U", "M")
x4 = mtcars$hp
lr(y ~ x1)
as.numeric(lr(y ~ x1)[[1]][, 1])
as.numeric(lm(y ~ x1)[[1]]
)
devtools::test()
lr(y ~ x1 + x2 + x3, coding = 'means')
lm(y ~ x1 + x2 + x3 - 1)
lr(y ~ x1 + x2 + x3, coding = 'means')[[1]]
##1.5 different specific situations under what lr() will give a specified error hint.
y = c(23, 24, 26, 37, 38, 25, 36, 40)
x5 = c(1, 2, 3, 4, 5, 6, 7, 8)
x6 = c(1, 2, 3, 4, 5, 6, 7, 8)
lr(y ~ x7)
lr(y1 ~ x5)
lr(y ~ x7, data=mtcars)
lr(y ~ x1 + x2 + x3, reference = 'S')
lr(y ~ x1 + x2 + x3, reference = 'F')
lr(y ~ x1 + x2 + x3, reference = 'U')
lr(y ~ x1 + x5 + x6)
x6 = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
lr(y ~ x1 + x5 + x6)
x5 = c(1, 2, 3, 4, 5, 6, 7, 8)
x6 = c(1, 2, 3, 4, 5, 6, 7)
lr(y ~ x6)
lr(y ~ x6)
x5 = c(1, 2, 3, 4, 5, 6, 9)
x6 = c(1, 2, 3, 4, 5, 6, 7)
lr(y ~ x5 + x6)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(testPkg)
result2 = lr(mtcars$mpg ~ cyl + disp + x4, data = mtcars)
library(testPkg)
library(bench)
y = c(23, 24, 26, 37, 38, 25, 36, 40)
x1 = c(1, 2, 3, 4, 5, 6, 7, 8)
x2 = c(23, 32, 34, 20, 24, 56, 34, 24)
x3 = c("M", "F", "F", "U", "M", "F", "U", "M")
x4 = mtcars$hp ### using "mtcars" dataframe from R
result = lr(y ~ x1 + x2 + x3)
result
##check the difference of coefficients under different options
result1 = lr(y ~ x1 + x2 + x3) ##coding = "reference", intercept = TRUE, reference = 1
result1[[1]]
result2 = lr(y ~ x1 + x2 + x3, coding = "means") ##with cell means coding method
result2[[1]]
result3 = lr(y ~ x1 + x2 + x3, intercept = FALSE) ##elinimate intercept term
result3[[1]]
result4 = lr(y ~ x1 + x2 + x3, reference = "F") ##speficy "F" reference group
result4[[1]]
devtools::install_github("XuelinGu/Linearregression",vignette =T)
browseVignettes("testPkg")
usethis::use_package("bench", "Depends")
